lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[4], colors[5], colors[6]))
cxBlend
cxSimulatedBinary
#######selecao#######
raw_data = read.csv2("CF02/clean_CF02-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF02/clean_CF02-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF02/clean_CF02-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF02/clean_CF02-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF02/clean_CF02-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF02/clean_CF02-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
boxplot(cxBlend)
boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[4], colors[5], colors[6]))
cxBlend
cxSimulatedBinary
#######selecao#######
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF01/clean_CF01-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF01/clean_CF01-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
#boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
#plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
#plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[4], colors[5], colors[6]))
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
cxSimulatedBinary
cxBlend
raw_data = read.csv2("CF01/clean_CF01-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
cxBlend
boxplot(cxf, names = names4, las = 3)
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[4], colors[5], colors[6]))
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
cxBlend
cxSimulatedBinary
boxplot(cxBlend)
boxplot(cxSimulatedBinary)
boxplot(cxf, names = names4, las = 3)
#######selecao#######
raw_data = read.csv2("CF08/clean_CF08-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF08/clean_CF08-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF08/clean_CF08-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF08/clean_CF08-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF08/clean_CF08-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF08/clean_CF08-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
cxSimulatedBinary
cxBlend
#######selecao#######
raw_data = read.csv2("CF07/clean_CF07-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF07/clean_CF07-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF07/clean_CF07-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF07/clean_CF07-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF07/clean_CF07-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
#######selecao#######
raw_data = read.csv2("CF07/clean_CF07-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF07/clean_CF07-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF07/clean_CF07-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF07/clean_CF07-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF07/clean_CF07-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF07/clean_CF07-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
cxBlend
cxSimulatedBinary
