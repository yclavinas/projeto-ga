names3 = c('1point','Ordered','P. Matched', '2point','Uniform', 'Uniform+P. Matched')
boxplot(cx, names = names3, las = 3)
names3 = c('1point','Ordered','P.Matched', '2point','Uniform', 'U.+P.Matched')
boxplot(cx, names = names3, las = 3)
names3 = c('1point','Ordered','P.Matched', '2point','Uniform', 'U.+Matched')
boxplot(cx, names = names3, las = 3)
names3 = c('1point','Ordered','P.Matched', '2point','Uniform', 'U.Matched')
boxplot(cx, names = names3, las = 3)
raw_data = read.csv2("clean_mean_cxBlend.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxSimulatedBinary.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxSimulatedBinaryBounded.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxOnePoint.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxcxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxTwoPoints.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
setwd("~/Documents/UnB/GA/projeto-ga/testes_cx_deap/clean_float")
raw_data = read.csv2("clean_mean_cxBlend.txt", header = F, sep=' ')
cxBlend = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxBlend.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxOnePoint.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxSimulatedBinary.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxSimulatedBinaryBounded.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxTwoPoints.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_cxUniform.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxBlend, cxSimulatedBinary, cxSimulatedBinaryBounded, cxcxOnePoint, cxTwoPoints, cxUniform)
names4 = c('Blend','Simulated','Simulated B','1point' ,'2point','Uniform')
boxplot(cxf, names = namesf, las = 3)
boxplot(cxf, names = names4, las = 3)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
boxplot(cxf, names = names4, las = 3)
teste
head(teste)
head(cxOnePoint)
head(cxBlend)
tail(cxOnePoint)
tail(cxBlend)
names4 = c('Blend','Simulated','SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
cxf = data.frame(cxBlend, cxSimulatedBinary, cxSimulatedBinaryBounded, cxBlend, cxTwoPoints, cxUniform)
names4 = c('Blend','Simulated','SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
cxf = data.frame(cxBlend, cxSimulatedBinary, cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('Blend','Simulated','SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
cxf = data.frame(cxBlend, cxSimulatedBinary, cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('Blend','Simulated','SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
cxf = data.frame(cxBlend, cxSimulatedBinary, cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('Blend','Simulated','SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
raw_data = read.csv2("clean_mean_mutFlipBit.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_mutPolynomialBounded.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_mutShuffleIndexes.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomi
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
raw_data = read.csv2("clean_mean_selBest.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_selRandom.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_selTournament.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("clean_mean_selworst.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selworst = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
raw_data = read.csv2("clean_mean_selRoulette.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
names6 = c('Torneio','Worst','Roleta','Random','Best')
boxplot(selecaof, names = names6, las = 3)
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
raw_data = read.csv2("clean_mean_selTournament.txt", header = F, sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
tr_error
plot(cxBlend, type='l')
length(cxBlend)
lines(cxSimulatedBinary)
RColorBrewer::display.brewer.all()
display.brewer.pal(Spectral)
display.brewer.pal(name = Spectral)
display.brewer.pal(name = 'Spectral')
display.brewer.pal(name = 'Spectral', n = 5)
plot(selBest, type='l', color = display.brewer.pal(name = 'Spectral', n = 5))
plot(selBest, type='l', color = display.brewer.pal(name = 'Spectral', n = 5))
colors <- brewer.pal(5, "Spectral")
colors
plot(selBest, type='l', color = colors)
gplot(selBest, type='l', color = colors)
ggplot(selBest, type='l', color = colors)
ggplot(selBest, type='l', color = colors[1])
plot(selBest, type='l', color = colors[1])
colors[1]
colors
colors[1,]
colors[1]
?plot
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='p', col = colors[2])
lines(selRandom, type='l', col = colors[2], lwd = 2)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lwd = 2)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lwd = 3)
lines(selRandom, type='l', col = colors[2], lty = 2)
colors <- brewer.pal(5, "Spectral")
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[3], lty = 3)
lines(selRoulette, type='l', col = colors[3], lty = 3)
lines(selRoulette, type='l', col = colors[4], lty = 3)
brewer.pal.info
brewer.pal.all()
display.brewer.all()
colors <- brewer.pal(5, "GnBu")
plot(selBest, type='l', col = colors[1])
colors <- brewer.pal(10, "GnBu")
plot(selBest, type='l', col = colors[1])
plot(selBest, type='l', col = colors[2])
display.brewer.all()
colors <- brewer.pal(10, "Paired")
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[4], lty = 3)
lines(selRoulette, type='l', col = colors[3], lty = 3)
colors <- brewer.pal(10, "Paired")
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[3], lty = 3)
lines(selTournament, type='l', col = colors[3], lty = 4)
lines(selworst, type='l', col = colors[3], lty = 5)
olors <- brewer.pal(10, "Paired")
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[3], lty = 3)
lines(selTournament, type='l', col = colors[4], lty = 4)
lines(selworst, type='l', col = colors[5], lty = 5)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[3], lty = 3)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[4], lty = 3)
lines(selTournament, type='l', col = colors[4], lty = 4)
lines(selworst, type='l', col = colors[5], lty = 5)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], lty = 2)
lines(selRoulette, type='l', col = colors[4], lty = 3)
lines(selTournament, type='l', col = colors[6], lty = 4)
lines(selworst, type='l', col = colors[7], lty = 5)
lines(selRandom, type='l', col = colors[2], phc = 0)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], phc = 0)
lines(selRoulette, type='l', col = colors[3], phc = 1)
lines(selTournament, type='l', col = colors[4], phc = 2)
lines(selworst, type='l', col = colors[4], phc = 5)
plot(selBest, type='l', col = colors[1])
lines(selRandom, type='l', col = colors[2], phc = 0)
lines(selRoulette, type='l', col = colors[3], phc = 1)
lines(selTournament, type='l', col = colors[4], phc = 2)
lines(selworst, type='l', col = colors[4], phc = 5)
)
lines(selRandom, type='l', col = colors[2], phc = 0)
lines(selRoulette, type='l', col = colors[3], phc = 1)
lines(selTournament, type='l', col = colors[4], phc = 2)
lines(selworst, type='l', col = colors[4], phc = 8)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selRandom, type='l', col = colors[2], phc = 0)
lines(selRoulette, type='l', col = colors[3], phc = 1)
lines(selTournament, type='l', col = colors[4], phc = 2)
lines(selworst, type='l', col = colors[4], phc = 8)
plot(selBest, type='l', col = colors[1], pch = 11)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selworst, type='l', col = colors[4], pch = 8)
raw_data = read.csv2("clean_selBest", sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
plot(selBest, type='l', col = colors[1], pch = 11)
raw_data = read.csv2("clean_selWorst", sep=' ')
raw_data = read.csv2("clean_selWorst", sep=' ')
setwd("~/Documents/UnB/GA/projeto-ga/testes_cx_deap/clean_float")
raw_data = read.csv2("clean_selWorst", sep=' ')
raw_data = read.csv2("clean_selWorst.txt", sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
lines(selworst, type='l', col = colors[4], pch = 8)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selRoulette, type='l', col = colors[3], pch = 1)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
raw_data = read.csv2("clean_selTournament.txt", sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selTournament, type='l', col = colors[4], pch = 2)
raw_data = read.csv2("clean_selBest.txt", sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(10, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selworst, type='l', col = colors[4], pch = 8)
colors <- brewer.pal(10, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selworst, type='l', col = colors[4], pch = 8)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selworst, type='l', col = colors[4], pch = 8)
boxplot(selecaof, names = names6, las = 3)
raw_data = read.csv2("clean_selWorst.txt", sep=' ')
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selworst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
boxplot(selecaof, names = names6, las = 3)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selworst, type='l', col = colors[4], pch = 8)
head(selBest)
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
plot(selBest, type='l', col = colors[1], pch = 11)
lines(selWorst, type='l', col = colors[4], pch = 8)
head(selBest)
head(selWorst)
tail(selBest)
tail(selWorst)
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5)
lines(selWorst, type='l', col = colors[4], pch = 8, lty = 4)
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5)
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[4], pch = 8, lty = 4)
lines(selWorst, type='l', col = colors[4], pch = 8, lty = 4, lwd = 5)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
boxplot(selecaof, names = names6, las = 3)
?legend
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5)
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, col = colors)
legend('bottomright', names6, col = c(colors))
legend('bottomright', names6, col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
legend('bottomright', names6, type= 'p', col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
legend('bottomright', names6, pch = c(1,1,1,1,1), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
legend('bottomright', names6, pch = c(3,1,1,1,1), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
legend('bottomright', names6, pch = c(19,1,1,1,1), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(selRandom, type='l', col = colors[2], pch = 0)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
title("Media do fitness das selecoes para P. Flutuante")
boxplot(mutacaof, names = names5, las = 3)
head(mutFlipBit)
head(mutShuffleIndexes)
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Paired")
colors <- brewer.pal(3, "Paired")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3])
title("Media do fitness das mutacoes para P. Flutuante")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
colors <- brewer.pal(3, "Paired")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(mutShuffleIndexes, type='l', col = colors[4], pch = 1, lty = 4, lwd = 5)
lines(mutShuffleIndexes, type='l', col = colors[4], pch = 1, lty = 4, lwd = 5)
lines(mutShuffleIndexes, type='l', col = colors[5], pch = 1, lty = 4, lwd = 5)
lines(mutShuffleIndexes, type='l', col = colors[6], pch = 1, lty = 4, lwd = 5)
lines(mutShuffleIndexes, type='l', col = colors[6], pch = 1, lty = 4, lwd = 5)
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutShuffleIndexes, type='l', col = colors[6], pch = 1, lty = 4, lwd = 5)
colors <- brewer.pal(3, "Paired")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[5], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3])
title("Media do fitness das mutacoes para P. Flutuante")
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3])
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para P. Flutuante")
display.brewer.all()
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para P. Flutuante")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(cxSimulatedBinary, type='l', col = colors[2], pch = 0)
lines(cxSimulatedBinaryBounded, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(cxOnePointt, type='l', col = colors[4], pch = 2)
lines(cxOnePoint, type='l', col = colors[4], pch = 2)
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 2)
lines(cxTwoPoints, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para P. Flutuante")
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(cxSimulatedBinary, type='l', col = colors[2], pch = 0)
lines(cxSimulatedBinaryBounded, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(cxOnePoint, type='l', col = colors[4], pch = 2)
lines(cxTwoPoints, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names4, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para P. Flutuante")
legend('bottomright', names4, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]), colors[4]), colors[5]), colors[6]))
legend('bottomright', names4, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5], colors[6]))
title("Media do fitness dos crossovers para P. Flutuante")
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(cxSimulatedBinary, type='l', col = colors[2], pch = 0)
lines(cxSimulatedBinaryBounded, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(cxOnePoint, type='l', col = colors[4], pch = 2)
lines(cxTwoPoints, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names4, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5], colors[6]))
title("Media do fitness dos crossovers para P. Flutuante")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binarycxSimulatedBinary, type='l', col = colors[2], pch = 0)
lines(binarycxSimulatedBinaryBounded, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binarycxOnePoint, type='l', col = colors[4], pch = 2)
lines(binarycxTwoPoints, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(binarycxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names3, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5], colors[6]))
title("Media do fitness dos crossovers para P. Flutuante")
boxplot(cx, names = names3, las = 3)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binarycxSimulatedBinary, type='l', col = colors[2], pch = 0)
colors <- brewer.pal(6, "Set1")
plot(binarycxOnePoint, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binarycxOrdered, type='l', col = colors[2], pch = 0)
lines(binarycxPartialyMatched, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binarycxTwoPoint, type='l', col = colors[4], pch = 2)
lines(binarycxUniform, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
tail(binarycxUniform)
plot(binarycxUniform, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binarycxOrdered, type='l', col = colors[2], pch = 0)
lines(binarycxPartialyMatched, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binarycxTwoPoint, type='l', col = colors[4], pch = 2)
lines(binarycxOnePoint, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(binarycxUniformPartialyMatched, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names3, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5], colors[6]))
title("Media do fitness dos crossovers para P. Flutuante")
title("Media do fitness dos crossovers para cromossomos binários")
plot(binarycxUniform, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binarycxOrdered, type='l', col = colors[2], pch = 0)
lines(binarycxPartialyMatched, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binarycxTwoPoint, type='l', col = colors[4], pch = 2)
lines(binarycxOnePoint, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(binarycxUniformPartialyMatched, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names3, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5], colors[6]))
title("Media do fitness dos crossovers para cromossomos binários")
plot(binaryFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryUniform, type='l', col = colors[2], pch = 0)
lines(binarymutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names3, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3])
title("Media do fitness das mutacoes para cromossomos binários")
legend('bottomright', names3, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3])
title("Media do fitness das mutacoes para cromossomos binários")
legend('bottomright', names3, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para cromossomos binários")
title("Media do fitness das mutacoes para cromossomos binarios")
title("Media do fitness dos crossovers para cromossomos binarios")
boxplot(selecao, names = names, las = 3)
plot(binaryMean_Tournament, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryMean_worst, type='l', col = colors[2], pch = 0)
lines(binaryMean_Roulette, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binaryMean_Random, type='l', col = colors[4], pch = 2)
lines(binaryMean_Best, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
title("Media do fitness das selecoes para cromossomos binarios")
plot(binaryMean_Tournament, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryMean_worst, type='l', col = colors[2], pch = 0)
lines(binaryMean_Roulette, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binaryMean_Random, type='l', col = colors[4], pch = 2)
lines(binaryMean_Best, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
title("Media do fitness das selecoes para cromossomos binarios")
binaryMean_worst
plot(binaryMean_worst, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryMean_Roulette, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binaryMean_Random, type='l', col = colors[4], pch = 2)
lines(binaryMean_Best, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
plot(binaryMean_worst, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryMean_worst, type='l', col = colors[2], pch = 0)
lines(binaryMean_Roulette, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
binaryMean_Roulette
plot(binaryMean_Roulette, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryMean_worst, type='l', col = colors[2], pch = 0)
binaryMean_Tournament
lines(binaryMean_Tournament, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binaryMean_Random, type='l', col = colors[4], pch = 2)
lines(binaryMean_Best, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
plot(binaryMean_Tournament, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
tail(binaryMean_Tournament)
plot(binaryMean_Roulette, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(binaryMean_Tournament, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryMean_Best, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(binaryMean_Random, type='l', col = colors[4], pch = 2)
lines(binaryMean_worst, type='l', col = colors[2], pch = 0)
lines(binaryMean_Tournament, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
lines(binaryMean_Random, type='l', col = colors[4], pch = 2)
lines(binaryMean_Best, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
length(binaryMean_Tournament)
abline(h = 0.9995)
Media do fitness das selecoes para cromossomos binarios
title("Media do fitness das selecoes para cromossomos binarios")
plot(binaryMean_Tournament, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
abline(h = 0.9995)
title("Media do fitness do Torneio para cromossomos binarios")
