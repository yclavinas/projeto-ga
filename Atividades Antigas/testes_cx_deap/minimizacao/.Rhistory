}
mediaRandom = mean(melhor)
sdRandom = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaBest = mean(melhor)
sdBest = sd(melhor)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
d = data.frame(
x  = names6
, y  = c(mediaBest, mediaRandom, mediaRoulette, mediaTournament, mediaWorst)
, sd = c(sdBest, sdRandom, sdRoulette, sdTournament, sdWorst)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
####mutacao#####
raw_data = read.csv2("CF04/clean_CF04-mutFlipBit(selWorst, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaFlipBit = mean(melhor)
sdFlipBit = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaShuffleIndexes = mean(melhor)
sdShuffleIndexes = sd(melhor)
mutacaof = data.frame(mutFlipBit, mutShuffleIndexes)
names5 = c('Flipbit','Shuflle')
d = data.frame(
x  = names5
, y  = c(mediaFlipBit, mediaShuffleIndexes)
, sd = c(sdFlipBit, sdShuffleIndexes)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
####crossover#####
raw_data = read.csv2("CF04/clean_CF04-cxBlend(selWorst, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaBlend = mean(melhor)
sdBlend = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-cxOnePoint(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaOnePoint = mean(melhor)
sdOnePoint = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-cxSimulatedBinary(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaSimulatedBinary = mean(melhor)
sdSimulatedBinary = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaShuffleIndexes = mean(melhor)
sdShuffleIndexes = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-cxTwoPoints(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaTwoPoints = mean(melhor)
sdTwoPoints = sd(melhor)
raw_data = read.csv2("CF04/clean_CF04-cxUniform(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
melhorUniform = (a <- rep(1, 50))
for (i in 1:50){
melhorUniform[i] = min(teste[i,], na.rm = T)
}
mediaUniform = mean(melhor)
sdUniform = sd(melhor)
cxf = data.frame(cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('1point' ,'2point','Uniform', 'cxBlend')
#mediaBlend, mediaOnePoint, mediaSimulatedBinary, mediaShuffleIndexes,mediaTwoPoints, mediaUniform
d = data.frame(
x  = names4
, y  = c(mediaOnePoint, mediaTwoPoints ,
mediaUniform, mediaBlend)
, sd = c(sdOnePoint, sdTwoPoints,
sdUniform, sdBlend)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
d1 = data.frame(
x  = c('SimulatatedBinary')
, y  = c(mediaSimulatedBinary)
, sd = c(sdSimulatedBinary)
)
#plot(d$x, d$y, type="n")
with (
data = d1
, expr = errbar(x, y, y+sd, y-sd)
)
#######selecao#######
#######selecao#######
raw_data = read.csv2("CF05/clean_CF05-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaWorst = mean(melhor)
sdWorst = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaTournament = mean(melhor)
sdTournament = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaRoulette = mean(melhor)
sdRoulette = sd(melhor)
raw_data = read.csv2("CF05/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaRandom = mean(melhor)
sdRandom = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaBest = mean(melhor)
sdBest = sd(melhor)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
d = data.frame(
x  = names6
, y  = c(mediaBest, mediaRandom, mediaRoulette, mediaTournament, mediaWorst)
, sd = c(sdBest, sdRandom, sdRoulette, sdTournament, sdWorst)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
####mutacao#####
raw_data = read.csv2("CF05/clean_CF05-mutFlipBit(selWorst, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaFlipBit = mean(melhor)
sdFlipBit = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaShuffleIndexes = mean(melhor)
sdShuffleIndexes = sd(melhor)
mutacaof = data.frame(mutFlipBit, mutShuffleIndexes)
names5 = c('Flipbit','Shuflle')
d = data.frame(
x  = names5
, y  = c(mediaFlipBit, mediaShuffleIndexes)
, sd = c(sdFlipBit, sdShuffleIndexes)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
####crossover#####
raw_data = read.csv2("CF05/clean_CF05-cxBlend(selWorst, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaBlend = mean(melhor)
sdBlend = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-cxOnePoint(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaOnePoint = mean(melhor)
sdOnePoint = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-cxSimulatedBinary(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaSimulatedBinary = mean(melhor)
sdSimulatedBinary = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaShuffleIndexes = mean(melhor)
sdShuffleIndexes = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-cxTwoPoints(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaTwoPoints = mean(melhor)
sdTwoPoints = sd(melhor)
raw_data = read.csv2("CF05/clean_CF05-cxUniform(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
melhorUniform = (a <- rep(1, 50))
for (i in 1:50){
melhorUniform[i] = min(teste[i,], na.rm = T)
}
mediaUniform = mean(melhor)
sdUniform = sd(melhor)
cxf = data.frame(cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('1point' ,'2point','Uniform', 'cxBlend')
#mediaBlend, mediaOnePoint, mediaSimulatedBinary, mediaShuffleIndexes,mediaTwoPoints, mediaUniform
d = data.frame(
x  = names4
, y  = c(mediaOnePoint, mediaTwoPoints ,
mediaUniform, mediaBlend)
, sd = c(sdOnePoint, sdTwoPoints,
sdUniform, sdBlend)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
d1 = data.frame(
x  = c('SimulatatedBinary')
, y  = c(mediaSimulatedBinary)
, sd = c(sdSimulatedBinary)
)
#plot(d$x, d$y, type="n")
with (
data = d1
, expr = errbar(x, y, y+sd, y-sd)
)
#######selecao#######
raw_data = read.csv2("CF06/clean_CF06-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaWorst = mean(melhor)
sdWorst = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaTournament = mean(melhor)
sdTournament = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaRoulette = mean(melhor)
sdRoulette = sd(melhor)
raw_data = read.csv2("CF06/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaRandom = mean(melhor)
sdRandom = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaBest = mean(melhor)
sdBest = sd(melhor)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
d = data.frame(
x  = names6
, y  = c(mediaBest, mediaRandom, mediaRoulette, mediaTournament, mediaWorst)
, sd = c(sdBest, sdRandom, sdRoulette, sdTournament, sdWorst)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
####mutacao#####
raw_data = read.csv2("CF06/clean_CF06-mutFlipBit(selWorst, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaFlipBit = mean(melhor)
sdFlipBit = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaShuffleIndexes = mean(melhor)
sdShuffleIndexes = sd(melhor)
mutacaof = data.frame(mutFlipBit, mutShuffleIndexes)
names5 = c('Flipbit','Shuflle')
d = data.frame(
x  = names5
, y  = c(mediaFlipBit, mediaShuffleIndexes)
, sd = c(sdFlipBit, sdShuffleIndexes)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
####crossover#####
raw_data = read.csv2("CF06/clean_CF06-cxBlend(selWorst, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaBlend = mean(melhor)
sdBlend = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-cxOnePoint(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaOnePoint = mean(melhor)
sdOnePoint = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-cxSimulatedBinary(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaSimulatedBinary = mean(melhor)
sdSimulatedBinary = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaShuffleIndexes = mean(melhor)
sdShuffleIndexes = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-cxTwoPoints(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
melhor = (a <- rep(1, 50))
for (i in 1:50){
melhor[i] = min(teste[i,], na.rm = T)
}
mediaTwoPoints = mean(melhor)
sdTwoPoints = sd(melhor)
raw_data = read.csv2("CF06/clean_CF06-cxUniform(selWorst, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
melhorUniform = (a <- rep(1, 50))
for (i in 1:50){
melhorUniform[i] = min(teste[i,], na.rm = T)
}
mediaUniform = mean(melhor)
sdUniform = sd(melhor)
cxf = data.frame(cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('1point' ,'2point','Uniform', 'cxBlend')
#mediaBlend, mediaOnePoint, mediaSimulatedBinary, mediaShuffleIndexes,mediaTwoPoints, mediaUniform
d = data.frame(
x  = names4
, y  = c(mediaOnePoint, mediaTwoPoints ,
mediaUniform, mediaBlend)
, sd = c(sdOnePoint, sdTwoPoints,
sdUniform, sdBlend)
)
#plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd)
)
d1 = data.frame(
x  = c('SimulatatedBinary')
, y  = c(mediaSimulatedBinary)
, sd = c(sdSimulatedBinary)
)
#plot(d$x, d$y, type="n")
with (
data = d1
, expr = errbar(x, y, y+sd, y-sd)
)
