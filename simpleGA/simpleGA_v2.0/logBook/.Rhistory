auxCPT$addValueAt(0L, .jfloat(0.99))
auxCPT$addValueAt(1L, .jfloat(0.01))
auxCPT$addValueAt(2L, .jfloat(0.1))
auxCPT$addValueAt(3L, .jfloat(0.9))
## prepare the algorithm to compile network
algorithm = new(JunctionTreeAlgorithm)
algorithm$setNetwork(net)
algorithm$run()
## print node's initial states
prior = c()
for (index in 1:net$getNodeCount()-1L) {
print(index)
node = net$getNodeAt(index)
value = paste(node$getDescription(), ": [ ", sep="", collapse="")
for (i in 1:node$getStatesSize()-1L) {
value = paste(value, node$getStateAt(i), " : ",
round(.jcast(node, "unbbayes/prs/bn/ProbabilisticNode")$getMarginalAt(i), 2),
" ", sep="", collapse="")
}
value = paste(value, "]", sep="", collapse="")
prior = c(prior, value)
}
prior
## insert evidence (finding) to the 1st node of "net"
findingNode = .jcast(net$getNodes()$get(0L), "unbbayes/prs/bn/ProbabilisticNode")
findingNode$addFinding(0L) ## the 1st state is now 100%
## insert likelihood
likelihood = .jarray(.jfloat(1:newNode$getStatesSize()))
likelihood[[1]] = .jfloat(1)
likelihood[[2]] = .jfloat(0.8)
newNode$addLikeliHood(likelihood)
## propagate evidence
net$updateEvidences()
## print updated node's states
posterior = c()
for (index in 1:net$getNodeCount()-1L) {
node = net$getNodeAt(index)
value = paste(node$getDescription(), ": [ ", sep="", collapse="")
for (i in 1:node$getStatesSize()-1L) {
value = paste(value, node$getStateAt(i), " : ",
round(.jcast(node, "unbbayes/prs/bn/ProbabilisticNode")$getMarginalAt(i), 2),
" ", sep="", collapse="")
}
value = paste(value, "]", sep="", collapse="")
posterior = c(posterior, value)
}
posterior
return(rbind(prior, posterior))
}
createNode(tub|asia, values=c(1,99),states=yn)
){}}
}}}}}}}}}}
}}}}}}}}}}
}}}}}}}}}}
}}}}}}}}}}
}}}}}}}}}}
}}}}}}}}}}
}}}}}}}}}}
createNode(tub|asia, values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
print (formula)
}
createNode(tub|asia, values=c(1,99),states=yn)
createNode('tub|asia', values=c(1,99),states=yn)
(formula, values, states) {
print (str(formula))
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
print (str(formula))
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
formula = str(formula))
print (formula[1])
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
formula = str(formula))
createNode <- function(formula, values, states) {
formula = str(formula)
print (formula[1])
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
formula = str(formula)
print (formula)
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
}
createNode <- function(formula, values, states) {
print (formula)
formula = str(formula)
print (formula)
}
createNode('tub|asia', values=c(1,99),states=yn)
?str
createNode <- function(formula, values, states) {
print (formula)
formula = split(formula)
print (formula)
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
print (formula)
formula = split(formula)
print (formula)
}
createNode('tub|asia', values=c(1,99),states=yn)
?split
formula = split(formula, '|')
createNode <- function(formula, values, states) {
print (formula)
formula = split(formula, '|')
print (formula)
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
print (formula)
formula = split(formula, '|')
print (formula[0])
print (formula[1])
print (formula[2])
}
createNode('tub|asia', values=c(1,99),states=yn)
createNode <- function(formula, values, states) {
formula = split(formula, '|')
print (formula[0])
}
createNode('tub|asia', values=c(1,99),states=yn)
formula = "tub|asia"
formula = split(formula, '|')
formula[0]
typeof(formula)
formula = as.vector("tub|asia")
formula = split(formula, '|')
formula[0]
formula = as.vector("tub|asia")
typeof(formula)
g <- airquality$Month
l <- split(airquality, g)
l
clear()
formula = as.vector("tub|asia")
formula = split(formula, '|')
formula[0]
formula = split(formula, "tub")
formula[0]
formula = split(formula, "|")
formula[0]
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
formula = strsplit(formula, "|")
formula = "tub|asia"
formula = strsplit(formula, "|")
print (formula[0])
print (formula)
print (formula[1])
formula = "tub|asia"
x = c(as = formula)
formula = strsplit(x, "|")
print (formula[1])
print strsplit(x, "|")
strsplit(x, "|")
teste = strsplit(x, "|")
print (teste$as)
formula = "tub|asia"
x = c(as = formula)
formula = strsplit(x, "[|]")
formula[0]
formula = "tub|asia"
strsplit(formula, "[|]")
formula = strsplit(x, "[|]")
formula[0]
formula[1]
formula = "tub|asia"
strsplit(formula, "[|]")
formula = strsplit(formula, "[|]")
formula[1]
formula[0]
?strsplit
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
teste = strsplit(x, "e")
teste[0]
teste
teste$as
x = c(formula = "tub|asia")
formula = strsplit(x, "[|]")
formula[0]
formula = strsplit(x, "[|]")
formula = "tub|asia"
x = c(formula = "tub|asia")
formula = strsplit(x, "[|]")
formula$formula
formula$formula[0]
formula$formula[1]
formula$formula[2]
formula = "tubasia"
x = c(formula = "tubasia")
formula = strsplit(x, "[|]")
formula$formula[2]
formula$formula[1]
formula$formula[2]
x = c(formula)
formula = strsplit(x, "[|]")
x = c(formula)
formula = strsplit(x, "[|]")
formula = "tub|asia"
formula = strsplit(formula, "[|]")
formula$formula[2]
formula
formula[1]
formula[1][1]
formula[[1]]
formula[[1]][1]
formula[[1]][2]
nome = formula[[1]][1]
nome
a
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
library("gRain", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
a
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
t.a
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
e.lt
typeof(a)
typeof(t.a)
typeof(yn)
class(e.lt)
?prob
?cat
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
cat(a)
print (a)
cat(a$values)
cat(Bone)
cat("Node info")
print(cptable)
print.cptable
a
b
t.a
compileCPT(list(t.a, e.lt))
),lev
compileCPT(list(a, t.a, e.lt))
a = cptable(~asia, values=c(5,95),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
compileCPT(list(a, t.a, e.lt))
e.lt <- cptable(~either|tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
compileCPT(list(a, t.a, e.lt))
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
plist <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
plist
compileCPT
plist$xray
class(~lung|smoke)
cptable
lista = "asda asd | sd"
strsplit(lista, " | ")
print.querygrain
querygrain
print("oi")
print('\n')
print("oi")
print(\n)
plot(binaryFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryUniform, type='l', col = colors[2], pch = 0)
lines(binarymutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names2, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para cromossomos binarios")
plot(binaryFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
#######selecao#######
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF01/clean_CF01-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF01/clean_CF01-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
#######selecao#######
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF01/clean_CF01-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF01/clean_CF01-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
soma = rep(0, 50)
soma
for (i in 1:50){
soma  = y2000[1*100,5] + soma
}
raw_data = read.csv2("teste.txt", sep='', header=F)
teste = apply(raw_data, 1, as.character)
y2000 = apply(teste, 1, as.numeric)
setwd("~/Documents/UnB/GA/projeto-ga")
setwd("~/Documents/UnB/GA/projeto-ga/simpleGA/simpleGA_v2.0")
setwd("~/Documents/UnB/GA/projeto-ga/simpleGA/simpleGA_v2.0")
raw_data = read.csv2("teste.txt", sep='', header=F)
teste = apply(raw_data, 1, as.character)
y2000 = apply(teste, 1, as.numeric)
soma = rep(0, 50)
for (i in 1:50){
soma  = y2000[1*100,5] + soma
}
soma
soma = rep(0, 50)
for (i in 1:50){
soma[i]  = y2000[1*100,5] + soma[i]
}
sima
soma
soma = rep(0, 50)
for (i in 1:50){
soma[i]  = y2000[i*100,5] + soma[i]
}
soma
soma = soma/50
soma
setwd("~/Documents/UnB/GA/projeto-ga/simpleGA/simpleGA_v2.0/logBook")
