formula[1]
formula[1][1]
formula[[1]]
formula[[1]][1]
formula[[1]][2]
nome = formula[[1]][1]
nome
a
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
library("gRain", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
a
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
t.a
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
e.lt
typeof(a)
typeof(t.a)
typeof(yn)
class(e.lt)
?prob
?cat
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
cat(a)
print (a)
cat(a$values)
cat(Bone)
cat("Node info")
print(cptable)
print.cptable
a
b
t.a
compileCPT(list(t.a, e.lt))
),lev
compileCPT(list(a, t.a, e.lt))
a = cptable(~asia, values=c(5,95),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
compileCPT(list(a, t.a, e.lt))
e.lt <- cptable(~either|tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
compileCPT(list(a, t.a, e.lt))
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
plist <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
plist
compileCPT
plist$xray
class(~lung|smoke)
cptable
lista = "asda asd | sd"
strsplit(lista, " | ")
print.querygrain
querygrain
print("oi")
print('\n')
print("oi")
print(\n)
plot(binaryFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(binaryUniform, type='l', col = colors[2], pch = 0)
lines(binarymutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names2, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
title("Media do fitness das mutacoes para cromossomos binarios")
plot(binaryFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
#######selecao#######
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF01/clean_CF01-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF01/clean_CF01-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
#######selecao#######
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selWorst = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selTournament(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selTournament = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selRoulette(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRoulette = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_selRandom(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selRandom = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-selBest(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
selBest = apply(teste, 2, mean)
#selecao
selecaof = data.frame(selBest, selRandom, selRoulette, selTournament, selWorst)
names6 = c('Best','Random','Roleta','Torneio','Worst')
boxplot(selecaof, names = names6, las = 3)
colors <- brewer.pal(5, "Paired")
plot(selBest, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Posicao Individuo')
lines(selRandom, type='l', col = colors[2], pch = 10)
lines(selRoulette, type='l', col = colors[3], pch = 1)
lines(selTournament, type='l', col = colors[4], pch = 2)
lines(selWorst, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
legend('bottomright', names6, pch = c(19,19,19,19,19), col = c(colors[1], colors[2], colors[3], colors[4], colors[5]))
####mutacao#####
raw_data = read.csv2("CF01/clean_CF01-mutFlipBit(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutFlipBit = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutPolynomialBounded(selBest, cxOnePoint).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutPolynomialBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
mutacaof = data.frame(mutFlipBit, mutPolynomialBounded, mutShuffleIndexes)
names5 = c('Flipbit','Polynomial','Shuflle')
boxplot(mutacaof, names = names5, las = 3)
colors <- brewer.pal(3, "Set1")
plot(mutFlipBit, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
lines(mutPolynomialBounded, type='l', col = colors[2], pch = 0)
lines(mutShuffleIndexes, type='l', col = colors[3], pch = 1, lty = 4, lwd = 5)
legend('bottomright', names5, pch = c(19,19,19), col = c(colors[1], colors[2], colors[3]))
####crossover#####
raw_data = read.csv2("CF01/clean_CF01-cxBlend(selBest, mutFlmutShuffleIndexesipBit).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxBlend = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-cxOnePoint(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxOnePoint = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinary(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinary = apply(teste, 2, mean, na.rm = T)
raw_data = read.csv2("CF01/clean_CF01-mutShuffleIndexes(cxOnePoint, selBest).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
mutShuffleIndexes = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxSimulatedBinaryBounded(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxSimulatedBinaryBounded = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxTwoPoints(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxTwoPoints = apply(teste, 2, mean)
raw_data = read.csv2("CF01/clean_CF01-cxUniform(selBest, mutShuffleIndexes).txt", sep=' ', header=F)
teste = apply(raw_data, 1, as.character)
teste = apply(teste, 1, as.numeric)
cxUniform = apply(teste, 2, mean)
cxf = data.frame(cxSimulatedBinaryBounded, cxOnePoint, cxTwoPoints, cxUniform)
names4 = c('SimulateB.','1point' ,'2point','Uniform')
boxplot(cxf, names = names4, las = 3)
#boxplot(cxBlend)
#boxplot(cxSimulatedBinary)
colors <- brewer.pal(6, "Set1")
plot(cxBlend, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxSimulatedBinary, type='l', col = colors[1], pch = 11, lwd = 5, ylab='medias', xlab='Geracoes')
plot(cxTwoPoints, type='l', col = colors[1], pch = 2, lwd = 1, ylab='medias', xlab='Geracoes')
lines(cxOnePoint, type='l', col = colors[4], pch = 1, lwd = 3)
lines(cxSimulatedBinaryBounded, type='l', col = colors[5], pch = 8, lty = 4, lwd = 5)
lines(cxUniform, type='l', col = colors[6], pch = 8, lty = 4, lwd = 5)
names4 = c("2points", '1point', 'SimulatedBB', 'Uniform')
legend('bottomright',names4 , pch = c(19,19,19), col = c(colors[1], colors[4], colors[5], colors[6]))
raw_data = read.csv2("CF01/clean_CF01-selWorst(cxOnePoint, mutShuffleIndexes).txt", sep=' ', header=F)
setwd("~/Documents/UnB/GA/projeto-ga/simpleGA/simpleGA_v2.0")
raw_data = read.csv2("teste.txt", sep='', header=F)
teste = apply(raw_data, 1, as.character)
y2000 = apply(teste, 1, as.numeric)
head(y2000)
tail(y2000)
which(y2000[,1] == 99)
lenght(which(y2000[,1] == 99))
(which(y2000[,1] == 99))
len(which(y2000[,1] == 99))
sizeof(which(y2000[,1] == 99))
size(which(y2000[,1] == 99))
num(which(y2000[,1] == 99))
sum(which(y2000[,1] == 99))
count(which(y2000[,1] == 99))
table(which(y2000[,1] == 99))
sumtable(which(y2000[,1] == 99)))
sum(table(which(y2000[,1] == 99)))
which(y2000[,1] == 99)
a = which(y2000[,1] == 99)
a
for i 1:50{
print i
}
for (i in 1:50){
print i
}
for (i in 1:50){
print i
}
for (i in 1:50){
i
}
for (i in 1:50){
print (i)
}
a
for (i in 1:50){
print (i*100)
}
head(y2000)
for (i in 1:50){
print(y2000[i*100,5])
}
for (i in 1:5){
print(y2000[i*100,5])
}
head(y2000[,5])
head(y2000[a[1],5])
soma = 0
for (i in 1:50){
soma  = y2000[i*100,5]
}
soma = soma/50
soma
soma = 0
for (i in 1:50){
soma  = y2000[i*100,5] + soma
}
soma = soma/50
soma
z <- 0:9
z
z[9]
z <- 1:100
len(z)
lenght(z)
lenghtog(z)
lenghtof(z)
lengthof(z)
length(z)
length(a)
soma = 1:100
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[j,5] + soma
}
soma = soma/1
soma
z <- 1:100
}
soma = soma/1
soma
z <- 1:100
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[j,5] + soma
}
}
soma = rep(0, 100)
soma
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[i*j,5] + soma
}
}
soma
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:10){
soma[j]  = y2000[i*j,5] + soma
print(soma)
}
}
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:10){
soma[j]  = y2000[i*j,5]
}
}
print(soma)
soma = rep(0, 100)
for (i in 1:2){
for(j in 1:10){
soma[j]  = y2000[i*j,5]
}
}
print(soma)
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[i*j,5] + soma[j]
}
}
print(soma)
y2000[101]
y2000[101, 5]
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[i+j,5] + soma[j]
}
}
soma /= soma
print(soma)
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[i+j,5] + soma[j]
}
}
soma = soma/50
print(soma)
soma = rep(0, 100)
for (i in 1:1){
for(j in 1:100){
soma[j]  = y2000[i+j,5] + soma[j]
}
}
#soma = soma/50
print(soma)
soma = rep(0, 100)
for (i in 1:50){
for(j in 1:100){
soma[j]  = y2000[i+j,5] + soma[j]
}
}
soma = soma/50
print(soma)
boxplot(soma)
i+j
length(y2000)
soma = rep(0, 100)
for (i in 1:50){
for(j in 1:100){
soma[j]  = y2000[(i-i*100)+j,5] + soma[j]
}
}
soma = rep(0, 100)
for (i in 1:50){
for(j in 1:100){
soma[j]  = y2000[(i-1*100)+j,5] + soma[j]
}
}
i
soma = rep(0, 100)
for (i in 1:50){
for(j in 1:100){
soma[j]  = y2000[((i-1)*100)+j,5] + soma[j]
}
}
soma = soma/50
soma
boxplot(soma)
###media
raw_data = read.csv2("teste.txt", sep='', header=F)
teste = apply(raw_data, 1, as.character)
y2000 = apply(teste, 1, as.numeric)
soma = rep(0, 100)
for (i in 1:50){
for(j in 1:100){
soma[j]  = y2000[((i-1)*100)+j,4] + soma[j]
}
}
soma = soma/50
boxplot(soma)
###
sooma
soa
soma
boxplot(soma, soma)
raw_data = read.csv2("teste.txt", sep='', header=F)
teste = apply(raw_data, 1, as.character)
y2000 = apply(teste, 1, as.numeric)
soma2 = rep(0, 100)
for (i in 1:50){
for(j in 1:100){
soma2[j]  = y2000[((i-1)*100)+j,4] + soma2[j]
}
}
soma2 = soma2/50
boxplot(soma, soma2)
soma
soma2
plot(som)
plot(soma)
plot(soma2)
plot(soma)
hist(soma2)
plot(soma)
lines(soma2)
?plot
plot(soma, l)
plot(soma, type = "l")
lines(soma2)
source('~/.active-rstudio-document')
raw_data = read.csv2("teste.txt", sep='', header=F)
soma = rep(0, 50)
for (i in 1:1){
soma  = y2000[1*100,5] + soma
}
soma = soma/50
soma = rep(0, 50)
for (i in 1:1){
soma  = y2000[1*100,5] + soma
}
soma
i*100
y200[100,]
y2000[100,]
soma = rep(0, 50)
for (i in 1:50){
soma  = y2000[1*100,5] + soma
}
soma
